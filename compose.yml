volumes:
  rabbitmq:
  mysql:

secrets:
  wallet:
    file: ./config/local/wallet.pkey

services:
  # The APP's business logic
  hedge:
    depends_on:
      - rabbitmq
    image: hedge
    container_name: hedge
    build: .
    command: ["hedge"]
    volumes:
      - .:/srv

  arbitrum:
    depends_on:
      - rabbitmq
    image: node
    container_name: arbitrum
    working_dir: /srv
    command: [ "node", "js/arbitrum.js" ]
    volumes:
      - ./:/srv:ro
    secrets:
      - wallet

  liquidity:
    depends_on:
      - rabbitmq
    image: node
    container_name: liquidity
    working_dir: /srv
    command: [ "node", "js/liquidity.js" ]
    volumes:
      - ./:/srv:ro
    secrets:
      - wallet

  telegram:
    depends_on:
      - rabbitmq
      - mysql
    image: hedge
    container_name: telegram
    build: .
    command: ["telegram:start"]
    volumes:
      - .:/srv

  # subscribe to binance websockets and publish info to AMQP
  feed:
    image: hedge
    container_name: feed
    build: .
    command: ["feed"]
    restart: on-failure
    depends_on:
      - rabbitmq
    volumes:
      - .:/srv

  # on-demand notify user if price moved
  monitor-range:
    image: hedge
    container_name: monitor-range
    build: .
    command: ["monitor:range"]
    depends_on:
      - rabbitmq
    volumes:
      - .:/srv

  # on-demand notify user if asset is available to borrow
  monitor-inventory:
    image: hedge
    container_name: monitor-inventory
    build: .
    command: ["monitor:inventory"]
    depends_on:
      - rabbitmq
    volumes:
      - .:/srv

  # record trades to database for backtesting
  db:
    depends_on:
      - rabbitmq
      - mysql
    image: hedge
    container_name: db
    build: .
    command: ["db"]
    restart: on-failure
    volumes:
      - .:/srv

  # AMQP message queue to enable multitasking in PHP
  rabbitmq:
    hostname: rabbitmq # must be defined for data durability so that db file has always same name
    container_name: rabbitmq
    image: rabbitmq:3-management
    volumes:
      - rabbitmq:/var/lib/rabbitmq

  # database and GUI for it
  mysql:
    image: mysql:8
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - 127.0.0.1:3306:3306
    volumes:
      - mysql:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d:ro
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: ${COMPOSE_PROJECT_NAME}

  # dummy service just to build php and run dev tools in it
  php:
    build: .
    image: hedge
    container_name: php
    volumes:
      - .:/srv
    command: ["list"]
